<?php

/**
 * Booking
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    orangehrm
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Booking extends PluginBooking {

  const BOOKING_TYPE_HOURS = 1;
  const BOOKING_TYPE_SPECIFIC_TIME = 2;

  private $configBookingService;

  /**
   *
   * @param type $startDate
   * @param type $endDate
   * @return string
   */
  public static function calculateAvailibity($startDate, $endDate) {
    $availablePeriod = array();
    $start = strtotime($startDate);
    $end = strtotime($endDate);
    $diff = floor(($end - $start) / 86400);
    $weeks = floor($diff / 7);
    $days = $diff % 7;

    $date = $start;
    for ($i = 0; $i < $weeks; $i++) {
      $period = date('Y-m', $date);
      if (!in_array($period, $availablePeriod)) {
        array_push($availablePeriod, $period);
      }
      $date = strtotime("+ 1 week", $date);
    }
    for ($i = 0; $i < $days; $i++) {
      $period = date('Y-m', $date);
      if (!in_array($period, $availablePeriod)) {
        array_push($availablePeriod, $period);
      }
      $date = strtotime("+ 1 day", $date);
    }
    $date = $end;
    $period = date('Y-m', $date);
    if (!in_array($period, $availablePeriod)) {
      array_push($availablePeriod, $period);
    }

    return implode(',', $availablePeriod);
  }

  /**
   * 
   * @param int $bookingType
   * @param array $data
   * @return float
   */
  public static function calculateDuration($bookingType, $data = array()) {
    if ((
        self::BOOKING_TYPE_HOURS !== $bookingType &&
        self::BOOKING_TYPE_SPECIFIC_TIME !== $bookingType) ||
        !is_array($data) ||
        empty($data) ||
        !array_key_exists('hours', $data) ||
        !array_key_exists('minutes', $data) ||
        !array_key_exists('startTime', $data) ||
        !array_key_exists('endTime', $data)) {
      return 0;
    }

    switch ($bookingType) {
      case self::BOOKING_TYPE_HOURS:
        $hours = floatval($data['hours']);
        $minutes = floatval($data['minutes']);
        $minutes /= 60;
        $duration = $hours + $minutes;
        break;
      case self::BOOKING_TYPE_SPECIFIC_TIME:
        $date = date('Y-m-d');
        $start = strtotime($date . ' ' . $data['startTime']);
        $end = strtotime($date . ' ' . $data['endTime']);
        $duration = floor(($end - $start) / 3600);
        break;
      default :
        $duration = 0;
    }

    return $duration;
  }

  /**
   *
   * @return type
   */
  public function getEventStart() {
    $time = strtotime($this->startDate . ' ' . $this->startTime);
    $date = date('c', $time);
    return $date;
  }

  /**
   *
   * @return type
   */
  public function getEventEnd() {
    $time = strtotime($this->endDate . ' ' . $this->endTime);
    $date = date('c', $time);
    return $date;
  }

  /**
   *
   * @return type
   */
  public function getTitle() {
    return $this->getProject()->getName();
  }

  /**
   *
   * @return type
   */
  public function getCustomerName() {
    return $this->getCustomer()->getName();
  }

  /**
   *
   * @return type
   */
  public function getHours() {
    $duration = floor($this->duration);
    return intval($duration);
  }

  /**
   *
   * @return type
   */
  public function getMinutes() {
    $duration_f = floor($this->duration * 60);
    $duration = intval($duration_f);
    $minutes = $duration % 60;
    return $minutes;
  }

  /**
   *
   * @param ConfigBookingService $configService
   */
  public function setConfigBookingService(ConfigBookingService $configService) {
    $this->configBookingService = $configService;
  }

  /**
   *
   * @return type
   */
  public function getConfigBookingService() {
    if (!$this->configBookingService instanceof ConfigBookingService) {
      $this->configBookingService = new ConfigBookingService();
      $this->configBookingService->setConfigDao(new ConfigDao());
    }
    return $this->configBookingService;
  }

  /**
   *
   * @return type
   */
  public function getBookingAsCalendarEvent() {
    return array(
      'id' => $this->getBookingId(),
      'resourceId' => $this->getBookableId(),
      'title' => $this->getTitle(),
      'start' => $this->getEventStart(),
      'end' => $this->getEventEnd(),
      'duration' => $this->getDuration(),
      'customerId' => $this->getCustomerId(),
      'customerName' => $this->getCustomerName(),
      'projectId' => $this->getProjectId(),
      'isHoliday' => false,
    );
  }

}

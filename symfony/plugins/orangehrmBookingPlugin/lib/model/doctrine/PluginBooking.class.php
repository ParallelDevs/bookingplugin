<?php

/**
 * PluginBooking
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginBooking extends BaseBooking {

  private $configBookingService;

  /**
   *
   * @param type $startDate
   * @param type $endDate
   * @return string
   */
  public static function calculateAvailibity($startDate, $endDate) {
    $availablePeriod = array();
    $start = strtotime($startDate);
    $end = strtotime($endDate);
    $diff = floor(($end - $start) / 86400);
    $weeks = floor($diff / 7);
    $days = $diff % 7;

    $date = $start;
    for ($i = 0; $i < $weeks; $i++) {
      $period = date('Y-m', $date);
      if (!in_array($period, $availablePeriod)) {
        array_push($availablePeriod, $period);
      }
      $date = strtotime("+ 1 week", $date);
    }
    for ($i = 0; $i < $days; $i++) {
      $period = date('Y-m', $date);
      if (!in_array($period, $availablePeriod)) {
        array_push($availablePeriod, $period);
      }
      $date = strtotime("+ 1 day", $date);
    }
    $date = $end;
    $period = date('Y-m', $date);
    if (!in_array($period, $availablePeriod)) {
      array_push($availablePeriod, $period);
    }

    return implode(',', $availablePeriod);
  }

  /**
   *
   * @param type $hours
   * @param type $minutes
   * @return type
   */
  public static function calculateDurationHours($hours, $minutes) {
    $f_hours = floatval($hours);
    $f_minutes = floatval($minutes);
    $f_minutes /= 60;
    $duration = $f_hours + $f_minutes;
    return floatval($duration);
  }

  /**
   *
   * @param type $startTime
   * @param type $hours
   * @param type $minutes
   * @return type
   */
  public static function calculateEndTimeOfHours($startTime, $hours, $minutes) {
    $start = strtotime(date('Y-m-d') . ' ' . $startTime);
    $end = strtotime("+ $hours hours $minutes minutes", $start);
    $endTime = date('H:i:s', $end);
    return $endTime;
  }

  /**
   *
   * @param type $startTime
   * @param type $endTime
   */
  public static function calculateDurationTimes($startTime, $endTime) {
    $start = strtotime(date('Y-m-d') . ' ' . $startTime);
    $end = strtotime(date('Y-m-d') . ' ' . $endTime);
    $configBookingService = new ConfigBookingService();
    $configBookingService->setConfigDao(new ConfigDao());
    $breaksTimeConf = $configBookingService->getCompanyBreaksTime();
    $breaksTime = floatval($breaksTimeConf);

    $diff = floatval($end - $start);
    $diff /= 3600;
    $diff -= $breaksTime;
    return $diff;
  }

  /**
   * 
   * @param type $startDate
   * @param type $endDate
   * @param type $workingDays
   * @param type $holidays
   * @return array
   */
  public static function calculateBookingPeriods($startDate, $endDate, $workingDays, $holidays = array()) {
    $periods = array();
    $start = strtotime($startDate);
    $end = strtotime($endDate);
    $days = floor(($end - $start) / 86400);
    $startP = date('Y-m-d', $start);
    $endP = '';
    $date = $start;
    for ($i = 0; $i < $days; $i++) {
      $currentDate = date('Y-m-d', $date);
      $day = date('w', $date);
      if (in_array($day, $workingDays) && !in_array($currentDate, $holidays)) {
        if (empty($startP)) {
          $startP = $currentDate;
        }
        $endP = $currentDate;
      }
      else {
        if (!empty($startP) && !empty($endP)) {
          array_push($periods, array('startDate' => $startP, 'endDate' => $endP));
        }
        $startP = '';
        $endP = '';
      }
      $date = strtotime("+ 1 day", $date);
    }

    if (empty($startP)) {
      $startP = date('Y-m-d', $date);
    }
    $endP = date('Y-m-d', $end);
    array_push($periods, array('startDate' => $startP, 'endDate' => $endP));

    return $periods;
  }

  /**
   *
   * @return type
   */
  public function getEventStart() {
    $time = strtotime($this->startDate . ' ' . $this->startTime);
    $date = date('c', $time);
    return $date;
  }

  /**
   *
   * @return type
   */
  public function getEventEnd() {
    $time = strtotime($this->endDate . ' ' . $this->endTime);
    $date = date('c', $time);
    return $date;
  }

  /**
   *
   * @return type
   */
  public function getTitle() {
    return $this->getProject()->getName();
  }

  /**
   *
   * @return type
   */
  public function getCustomerName() {
    return $this->getCustomer()->getName();
  }

  /**
   *
   * @return type
   */
  public function getHours() {
    $hours = '';
    if (isset($this->duration) && is_numeric($this->duration)) {
      $duration_f = floor($this->duration);
      $hours = intval($duration_f);
    }
    return $hours;
  }

  /**
   *
   * @return type
   */
  public function getMinutes() {
    $minutes = '';
    if (isset($this->duration) && is_numeric($this->duration)) {
      $duration_f = floor($this->duration * 60);
      $duration = intval($duration_f);
      $minutes = $duration % 60;
    }
    return $minutes;
  }

  /**
   *
   * @return type
   */
  public function getIsEditable() {
    $editable = $this->getBookableResource()->getIsActive();
    return BookableResource::STATUS_ACTIVE == $editable ? true : false;
  }

  /**
   *
   * @param ConfigBookingService $configService
   */
  public function setConfigBookingService(ConfigBookingService $configService) {
    $this->configBookingService = $configService;
  }

  /**
   *
   * @return type
   */
  public function getConfigBookingService() {
    if (!$this->configBookingService instanceof ConfigBookingService) {
      $this->configBookingService = new ConfigBookingService();
      $this->configBookingService->setConfigDao(new ConfigDao());
    }
    return $this->configBookingService;
  }

  /**
   *
   * @return type
   */
  public function getBookingAsCalendarEvent() {
    return array(
      'id' => $this->getBookingId(),
      'resourceId' => $this->getBookableId(),
      'title' => $this->getTitle(),
      'start' => $this->getEventStart(),
      'end' => $this->getEventEnd(),
      'duration' => $this->getDuration(),
      'customerId' => $this->getCustomerId(),
      'customerName' => $this->getCustomerName(),
      'projectId' => $this->getProjectId(),
      'isHoliday' => false,
      'color' => $this->getBookingColor(),
      'editable' => $this->getIsEditable(),
    );
  }

}
